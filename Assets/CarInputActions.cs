//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/CarInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/CarInputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @CarInputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @CarInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""CarInputActions"",
    ""maps"": [
        {
            ""name"": ""Car"",
            ""id"": ""bec18e3f-2e39-4f35-b306-d2ac522e5bc3"",
            ""actions"": [
                {
                    ""name"": ""WheelFL_Forward"",
                    ""type"": ""Button"",
                    ""id"": ""636b1dac-2106-4ba8-a1aa-fdab8f8fe04b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WheelFL_Backward"",
                    ""type"": ""Button"",
                    ""id"": ""acae571f-4616-4c2a-8566-465778bc240b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WheelFR_Forward"",
                    ""type"": ""Button"",
                    ""id"": ""7b76b273-a48d-48e9-8b1c-4042ccb42100"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WheelFR_Backward"",
                    ""type"": ""Button"",
                    ""id"": ""f5d447ab-21d6-49dc-be7b-e82f0628f3a5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WheelRL_Forward"",
                    ""type"": ""Button"",
                    ""id"": ""982efbee-efa6-4bca-8968-2c3ec27cafa4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WheelRL_Backward"",
                    ""type"": ""Button"",
                    ""id"": ""362603d3-f28a-4d4b-8551-cfc7e1344bd9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WheelRR_Forward"",
                    ""type"": ""Button"",
                    ""id"": ""aa1e1c52-9335-4eec-8602-8215aba83f24"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WheelRR_Backward"",
                    ""type"": ""Button"",
                    ""id"": ""4a6e7dc5-42cc-4d45-8cee-a8270b1cacab"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e474c0e8-26d3-44e3-9109-f872eb91c476"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WheelFL_Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc9c91b7-c1a6-4eb6-b56a-42f8268aa313"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WheelFL_Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c29cd63-ff0a-49da-bb0f-a409040f7069"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WheelFR_Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85449c74-88f3-4b29-89d0-ff2491ff4d15"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WheelFR_Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1db18ff4-89f7-4cc1-ba04-cb6eedc3cbea"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WheelRL_Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d837a65-9bfb-4886-a0bd-019117b6107b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WheelRL_Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fefdd8ff-33cc-44b8-b287-a11e457fe349"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WheelRR_Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbdf25e4-53c5-4280-939f-d6ce9404bdad"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WheelRR_Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Car
        m_Car = asset.FindActionMap("Car", throwIfNotFound: true);
        m_Car_WheelFL_Forward = m_Car.FindAction("WheelFL_Forward", throwIfNotFound: true);
        m_Car_WheelFL_Backward = m_Car.FindAction("WheelFL_Backward", throwIfNotFound: true);
        m_Car_WheelFR_Forward = m_Car.FindAction("WheelFR_Forward", throwIfNotFound: true);
        m_Car_WheelFR_Backward = m_Car.FindAction("WheelFR_Backward", throwIfNotFound: true);
        m_Car_WheelRL_Forward = m_Car.FindAction("WheelRL_Forward", throwIfNotFound: true);
        m_Car_WheelRL_Backward = m_Car.FindAction("WheelRL_Backward", throwIfNotFound: true);
        m_Car_WheelRR_Forward = m_Car.FindAction("WheelRR_Forward", throwIfNotFound: true);
        m_Car_WheelRR_Backward = m_Car.FindAction("WheelRR_Backward", throwIfNotFound: true);
    }

    ~@CarInputActions()
    {
        UnityEngine.Debug.Assert(!m_Car.enabled, "This will cause a leak and performance issues, CarInputActions.Car.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Car
    private readonly InputActionMap m_Car;
    private List<ICarActions> m_CarActionsCallbackInterfaces = new List<ICarActions>();
    private readonly InputAction m_Car_WheelFL_Forward;
    private readonly InputAction m_Car_WheelFL_Backward;
    private readonly InputAction m_Car_WheelFR_Forward;
    private readonly InputAction m_Car_WheelFR_Backward;
    private readonly InputAction m_Car_WheelRL_Forward;
    private readonly InputAction m_Car_WheelRL_Backward;
    private readonly InputAction m_Car_WheelRR_Forward;
    private readonly InputAction m_Car_WheelRR_Backward;
    /// <summary>
    /// Provides access to input actions defined in input action map "Car".
    /// </summary>
    public struct CarActions
    {
        private @CarInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public CarActions(@CarInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Car/WheelFL_Forward".
        /// </summary>
        public InputAction @WheelFL_Forward => m_Wrapper.m_Car_WheelFL_Forward;
        /// <summary>
        /// Provides access to the underlying input action "Car/WheelFL_Backward".
        /// </summary>
        public InputAction @WheelFL_Backward => m_Wrapper.m_Car_WheelFL_Backward;
        /// <summary>
        /// Provides access to the underlying input action "Car/WheelFR_Forward".
        /// </summary>
        public InputAction @WheelFR_Forward => m_Wrapper.m_Car_WheelFR_Forward;
        /// <summary>
        /// Provides access to the underlying input action "Car/WheelFR_Backward".
        /// </summary>
        public InputAction @WheelFR_Backward => m_Wrapper.m_Car_WheelFR_Backward;
        /// <summary>
        /// Provides access to the underlying input action "Car/WheelRL_Forward".
        /// </summary>
        public InputAction @WheelRL_Forward => m_Wrapper.m_Car_WheelRL_Forward;
        /// <summary>
        /// Provides access to the underlying input action "Car/WheelRL_Backward".
        /// </summary>
        public InputAction @WheelRL_Backward => m_Wrapper.m_Car_WheelRL_Backward;
        /// <summary>
        /// Provides access to the underlying input action "Car/WheelRR_Forward".
        /// </summary>
        public InputAction @WheelRR_Forward => m_Wrapper.m_Car_WheelRR_Forward;
        /// <summary>
        /// Provides access to the underlying input action "Car/WheelRR_Backward".
        /// </summary>
        public InputAction @WheelRR_Backward => m_Wrapper.m_Car_WheelRR_Backward;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Car; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="CarActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(CarActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="CarActions" />
        public void AddCallbacks(ICarActions instance)
        {
            if (instance == null || m_Wrapper.m_CarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CarActionsCallbackInterfaces.Add(instance);
            @WheelFL_Forward.started += instance.OnWheelFL_Forward;
            @WheelFL_Forward.performed += instance.OnWheelFL_Forward;
            @WheelFL_Forward.canceled += instance.OnWheelFL_Forward;
            @WheelFL_Backward.started += instance.OnWheelFL_Backward;
            @WheelFL_Backward.performed += instance.OnWheelFL_Backward;
            @WheelFL_Backward.canceled += instance.OnWheelFL_Backward;
            @WheelFR_Forward.started += instance.OnWheelFR_Forward;
            @WheelFR_Forward.performed += instance.OnWheelFR_Forward;
            @WheelFR_Forward.canceled += instance.OnWheelFR_Forward;
            @WheelFR_Backward.started += instance.OnWheelFR_Backward;
            @WheelFR_Backward.performed += instance.OnWheelFR_Backward;
            @WheelFR_Backward.canceled += instance.OnWheelFR_Backward;
            @WheelRL_Forward.started += instance.OnWheelRL_Forward;
            @WheelRL_Forward.performed += instance.OnWheelRL_Forward;
            @WheelRL_Forward.canceled += instance.OnWheelRL_Forward;
            @WheelRL_Backward.started += instance.OnWheelRL_Backward;
            @WheelRL_Backward.performed += instance.OnWheelRL_Backward;
            @WheelRL_Backward.canceled += instance.OnWheelRL_Backward;
            @WheelRR_Forward.started += instance.OnWheelRR_Forward;
            @WheelRR_Forward.performed += instance.OnWheelRR_Forward;
            @WheelRR_Forward.canceled += instance.OnWheelRR_Forward;
            @WheelRR_Backward.started += instance.OnWheelRR_Backward;
            @WheelRR_Backward.performed += instance.OnWheelRR_Backward;
            @WheelRR_Backward.canceled += instance.OnWheelRR_Backward;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="CarActions" />
        private void UnregisterCallbacks(ICarActions instance)
        {
            @WheelFL_Forward.started -= instance.OnWheelFL_Forward;
            @WheelFL_Forward.performed -= instance.OnWheelFL_Forward;
            @WheelFL_Forward.canceled -= instance.OnWheelFL_Forward;
            @WheelFL_Backward.started -= instance.OnWheelFL_Backward;
            @WheelFL_Backward.performed -= instance.OnWheelFL_Backward;
            @WheelFL_Backward.canceled -= instance.OnWheelFL_Backward;
            @WheelFR_Forward.started -= instance.OnWheelFR_Forward;
            @WheelFR_Forward.performed -= instance.OnWheelFR_Forward;
            @WheelFR_Forward.canceled -= instance.OnWheelFR_Forward;
            @WheelFR_Backward.started -= instance.OnWheelFR_Backward;
            @WheelFR_Backward.performed -= instance.OnWheelFR_Backward;
            @WheelFR_Backward.canceled -= instance.OnWheelFR_Backward;
            @WheelRL_Forward.started -= instance.OnWheelRL_Forward;
            @WheelRL_Forward.performed -= instance.OnWheelRL_Forward;
            @WheelRL_Forward.canceled -= instance.OnWheelRL_Forward;
            @WheelRL_Backward.started -= instance.OnWheelRL_Backward;
            @WheelRL_Backward.performed -= instance.OnWheelRL_Backward;
            @WheelRL_Backward.canceled -= instance.OnWheelRL_Backward;
            @WheelRR_Forward.started -= instance.OnWheelRR_Forward;
            @WheelRR_Forward.performed -= instance.OnWheelRR_Forward;
            @WheelRR_Forward.canceled -= instance.OnWheelRR_Forward;
            @WheelRR_Backward.started -= instance.OnWheelRR_Backward;
            @WheelRR_Backward.performed -= instance.OnWheelRR_Backward;
            @WheelRR_Backward.canceled -= instance.OnWheelRR_Backward;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CarActions.UnregisterCallbacks(ICarActions)" />.
        /// </summary>
        /// <seealso cref="CarActions.UnregisterCallbacks(ICarActions)" />
        public void RemoveCallbacks(ICarActions instance)
        {
            if (m_Wrapper.m_CarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="CarActions.AddCallbacks(ICarActions)" />
        /// <seealso cref="CarActions.RemoveCallbacks(ICarActions)" />
        /// <seealso cref="CarActions.UnregisterCallbacks(ICarActions)" />
        public void SetCallbacks(ICarActions instance)
        {
            foreach (var item in m_Wrapper.m_CarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="CarActions" /> instance referencing this action map.
    /// </summary>
    public CarActions @Car => new CarActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Car" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="CarActions.AddCallbacks(ICarActions)" />
    /// <seealso cref="CarActions.RemoveCallbacks(ICarActions)" />
    public interface ICarActions
    {
        /// <summary>
        /// Method invoked when associated input action "WheelFL_Forward" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnWheelFL_Forward(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "WheelFL_Backward" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnWheelFL_Backward(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "WheelFR_Forward" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnWheelFR_Forward(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "WheelFR_Backward" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnWheelFR_Backward(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "WheelRL_Forward" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnWheelRL_Forward(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "WheelRL_Backward" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnWheelRL_Backward(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "WheelRR_Forward" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnWheelRR_Forward(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "WheelRR_Backward" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnWheelRR_Backward(InputAction.CallbackContext context);
    }
}
